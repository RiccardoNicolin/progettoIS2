openapi: 3.0.0
info:
  version: '1.0'
  title: "Assignments OpenAPI 3.0"
  description: API for managing the tv series website
  license:
    name: MIT
servers:
  - url: https://secret-retreat-87773.herokuapp.com/
    description: Heroku
  - url: http://localhost:3000/
    description: Localhost
paths:
  /signup:
    post:
      description: >-
        Creates a new user in the system.
      summary: Create a new user 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'User created'
        '500':
          description: 'Error during password hasing'
  /login:
    post:
      description: >-
        Login as a registered user and get a token 
      summary: login as a registered user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'Authentication succeful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: 'Authentication unsuccessful, retry using other data'
  /home:
    get:
      description: home page
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Home1'
                  - $ref: '#/components/schemas/Home2'
                  
  /home/userlist:
    get:
      description: get all users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /series:
    post:
      description: >-
        Creates a new serie in the system.
      summary: Create a new serie
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Serie'
      responses:
        '201':
          description: 'serie created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '500':
          description: 'Not all fields present'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          description: 'Lacking administration privileges to do this action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    get:
      description: 'get all the series'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    allseries:
                      $ref: '#/components/schemas/Serie'
                    verifydeck:
                      $ref: '#/components/schemas/Verifydec'
  /series/{name}:
    get:
      description: 'get a particular serie'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: 'name of the requested show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      selected:
                        $ref: '#/components/schemas/Serie'
                      verifydec:
                        $ref: '#/components/schemas/Verifydec'
                      watched:
                        $ref: '#/components/schemas/Episode'
                  - type: object
                    properties:
                      selected:
                        $ref: '#/components/schemas/Serie'
                      verifydec:
                        $ref: '#/components/schemas/Verifydec'
        '404':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    post:
      description: 'post a comment, add a new episode or bookmark the serie'
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: 'name of the serie you want to comment'
      security:
        - bearerAuth: []
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    description: 'comment to the serie'
                  episodeName:
                    type: string
                    description: 'name of the episode to add'
                  episodeNumber:
                    type: string
                    description: 'number of the episode to add'
                  watchedNum:
                    type: boolean
                    description: 'true if you want to add the serie to watchlist'
      responses:
        '201':
          description: 'operation succesful.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/message'
                  - type: object
                    properties:
                      message:
                        type: string
                        description: 'confirmation message'
                      watchedres:
                        type: integer
                        description: 'only for frontend usage'
        '500':
          description: 'missing parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '403':
          description: 'error in parameters when adding the serie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    patch:
      description: 'update a particular show'
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: 'name of the requested show'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    score:
                      type: number
                      description: 'vote that you want to change to' 
                - type: object
                  properties:
                    target:
                      type: string
                      description: 'target field you want to change'
                    change:
                      type: string
                      description: 'new value of the field'
      responses:
        '200':
          description: 'serie updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '500':
          description: 'missing target parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          description: 'lacking administartion priviledge'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /series/{name}/{episodeNumber}:
    get:
      description: 'get a particular episode of a serie'
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: 'name of the requested show'
        - name: episodeNumber
          in: path
          schema:
            type: string
          required: true
          description: 'number of the episode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      selected:
                        $ref: '#/components/schemas/Episode'
                      verifydec:
                        $ref: '#/components/schemas/Verifydec'
                      watched:
                        type: boolean
                        description: 'return 1 if the episode is already watched otherwise return 0'
                      isnotlast:
                        $ref: '#/components/schemas/Episode'
                      rootserie:
                        $ref: '#/components/schemas/Serie'
                  - $ref: '#/components/schemas/Episode'
        '404':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    post:
      description: 'post a comment or add an episode to watched'
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: 'name of the serie you want to comment'
        - name: episodeNumber
          in: path
          schema:
            type: string
          required: true
          description: 'number of the episode'
      security:
        - bearerAuth: []
      requestBody:
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      comment:
                        type: string
                        description: 'comment to the serie'
                  - type: object
                    properties:
                      watchupdate:
                        type: boolean
                        description: 'boolean to set if the episode is watched'
      responses:
        '201':
          description: 'operation succesful.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/message'
                  - type: object
                    properties:
                      message:
                        type: string
                        description: 'confirmation message'
                      watchedres:
                        type: integer
                        description: 'only for frontend usage'
        '500':
          description: 'missing parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    patch:
      description: 'update a particular episode'
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: 'name of the requested show'
        - name: episodeNumber
          in: path
          schema:
            type: string
          required: true
          description: 'number of the episode'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    score:
                      type: number
                      description: 'vote that you want to change to' 
                - type: object
                  properties:
                    target:
                      type: string
                      description: 'target field you want to change'
                    change:
                      type: string
                      description: 'new value of the field'
      responses:
        '200':
          description: 'episode updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '500':
          description: 'missing target parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          description: 'lacking administartion priviledge'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '422':
          description: 'cannot change that target'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: 'Username of the user'
        email:
          type: string
          description: 'Email address of the user'
        password:
          type: string
          description: 'Hashed password of the user'
    Serie:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 'name of the show'
        poster:
          type: string
          description: 'poster of the show'
        genre:
          type: array
          items: 
            type: string
          description: 'genere e tag della serie'
        score:
          type: number
          description: 'score della serie'
        numberOfvotes :
          type: integer
          description: 'number of votes'
        actors:
          type: array
          items:
            type: string
          description: 'actors of the serie'
        seasons:
          type: integer
          description: 'number of seasons of the series'
    Home1:
      type: object
      required:
        - serieshot
        - seriesnew
        - verifydeck
      properties:
        serieshot:
          type: array
          items:
            $ref: '#/components/schemas/Serie'
          description: 'hot series'
        seriesnew:
          type: array
          items:
            $ref: '#/components/schemas/Serie'
          description: 'new series'
        verifydeck:
          $ref: '#/components/schemas/Verifydec'
        serieswatched:
          type: array
          items:
            $ref: '#/components/schemas/Serie'
          description: 'series the user is currently watching, present only in logged user'
    Home2:
      type: object
      required:
        - serieshot
        - seriesnew
        - verifydeck
      properties:
        serieshot:
          type: array
          items:
            $ref: '#/components/schemas/Serie'
          description: 'hot series'
        seriesnew:
          type: array
          items:
            $ref: '#/components/schemas/Serie'
          description: 'new series'
        verifydeck:
          $ref: '#/components/schemas/Verifydec'
    Comments:
      type: object
      required:
        - poster
        - comment
      properties:
        poster:
          type: string
          description: 'name of the poster of the comment'
        comment:
          type: string
          description: 'the body of the comment'
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 'Username of the user'
        password:
          type: string
          description: 'Hashed password of the user'
    Verifydec:
      type: string
      description: 'decoded token'
    Token:
      type: string
      description: 'token for the logged user'
    Episode:
      type: object
      required:
        - episodeName
        - episodeNumber
      properties:
        episodeName:
          type: string
          description: 'name of the episode'
        episodeNumber:
          type: integer
          description: 'number of the episode in relation to the whole serie, not the season'
        score:
          type: number
          description: 'rounded score of the episode'
        numberOfvotes:
          type: integer
          description: 'number of the total votes for the episode'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comments'
    message:
      type: string
      description: 'status message'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT